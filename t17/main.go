package main

import "fmt"

// binarySearch выполняет бинарный поиск в отсортированном срезе arr.
// Возвращает индекс найденного элемента и true, если элемент найден, иначе -1 и false.

func binarySearch(arr []int, target int) (int, bool) {
	// Устанавливаем начальные значения границ поиска
	low, high := 0, len(arr)-1

	// Пока левая граница не превысит правую, продолжаем поиск
	for low <= high {
		// Вычисляем средний индекс
		mid := (low + high) / 2

		// Если средний элемент равен искомому значению, возвращаем индекс и true
		if arr[mid] == target {
			return mid, true
		} else if arr[mid] < target {
			// Если средний элемент меньше искомого, устанавливаем левую границу в средний индекс + 1
			low = mid + 1
		} else {
			// Если средний элемент больше искомого, устанавливаем правую границу в средний индекс - 1
			high = mid - 1
		}
	}

	// Если элемент не найден, возвращаем -1 и false
	return -1, false
}

func main() {
	// Пример отсортированного среза для бинарного поиска
	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

	// Искомое значение
	target := 6

	// Вызываем бинарный поиск
	index, found := binarySearch(arr, target)

	// Проверяем, найдено ли значение
	if found {
		fmt.Printf("Значение %d найдено в позиции %d\n", target, index)
	} else {
		fmt.Printf("Значение %d не найдено в срезе\n", target)
	}
}
